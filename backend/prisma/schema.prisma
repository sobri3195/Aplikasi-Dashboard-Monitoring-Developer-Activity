generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  name      String?
  password  String
  role      UserRole @default(DEVELOPER)
  isActive  Boolean  @default(true)
  twoFactorEnabled Boolean @default(false)
  twoFactorSecret  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  devices    Device[]
  activities Activity[]
  sessions   UserSession[]
  notificationPreferences NotificationPreference[]

  @@map("users")
}

model Device {
  id            String       @id @default(uuid())
  userId        String
  deviceName    String
  fingerprint   String       @unique
  hostname      String?
  macAddress    String?
  cpuInfo       String?
  osInfo        String?
  ipAddress     String?
  status        DeviceStatus @default(PENDING)
  lastSeen      DateTime?
  isAuthorized  Boolean      @default(false)
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt

  user       User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  activities Activity[]

  @@map("devices")
}

model Activity {
  id          String         @id @default(uuid())
  userId      String
  deviceId    String?
  activityType ActivityType
  repository  String?
  branch      String?
  commitHash  String?
  details     Json?
  ipAddress   String?
  location    String?
  isSuspicious Boolean       @default(false)
  riskLevel   RiskLevel     @default(LOW)
  timestamp   DateTime      @default(now())
  createdAt   DateTime      @default(now())

  user   User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  device Device? @relation(fields: [deviceId], references: [id], onDelete: Cascade)
  alerts Alert[]

  @@index([userId])
  @@index([deviceId])
  @@index([isSuspicious])
  @@index([timestamp])
  @@map("activities")
}

model Alert {
  id          String      @id @default(uuid())
  activityId  String
  alertType   AlertType
  severity    Severity
  message     String
  isResolved  Boolean     @default(false)
  resolvedAt  DateTime?
  resolvedBy  String?
  notified    Boolean     @default(false)
  notifiedAt  DateTime?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  activity Activity @relation(fields: [activityId], references: [id], onDelete: Cascade)

  @@index([isResolved])
  @@index([severity])
  @@index([createdAt])
  @@map("alerts")
}

model Repository {
  id              String           @id @default(uuid())
  name            String
  gitlabUrl       String?
  gitlabProjectId Int?
  isEncrypted     Boolean          @default(false)
  encryptedAt     DateTime?
  securityStatus  SecurityStatus   @default(SECURE)
  lastActivity    DateTime?
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt

  @@unique([gitlabProjectId])
  @@map("repositories")
}

model AuditLog {
  id        String   @id @default(uuid())
  userId    String?
  action    String
  entity    String?
  entityId  String?
  changes   Json?
  ipAddress String?
  userAgent String?
  timestamp DateTime @default(now())

  @@index([userId])
  @@index([timestamp])
  @@map("audit_logs")
}

model SystemPerformance {
  id              String   @id @default(uuid())
  cpuUsage        Float
  memoryUsage     Float
  memoryTotal     Float
  memoryFree      Float
  diskUsage       Float
  diskTotal       Float
  diskFree        Float
  activeConnections Int    @default(0)
  requestsPerMinute Int    @default(0)
  timestamp       DateTime @default(now())

  @@index([timestamp])
  @@map("system_performance")
}

model BackupRecord {
  id          String       @id @default(uuid())
  filename    String
  filePath    String
  fileSize    Float
  backupType  BackupType
  status      BackupStatus @default(IN_PROGRESS)
  startedAt   DateTime     @default(now())
  completedAt DateTime?
  error       String?
  createdBy   String?

  @@index([status])
  @@index([startedAt])
  @@map("backup_records")
}

model ApiUsageLog {
  id          String   @id @default(uuid())
  endpoint    String
  method      String
  statusCode  Int
  responseTime Float
  ipAddress   String?
  userId      String?
  userAgent   String?
  timestamp   DateTime @default(now())

  @@index([endpoint])
  @@index([userId])
  @@index([timestamp])
  @@map("api_usage_logs")
}

model SystemLog {
  id        String    @id @default(uuid())
  level     LogLevel
  message   String
  source    String?
  metadata  Json?
  timestamp DateTime  @default(now())

  @@index([level])
  @@index([timestamp])
  @@map("system_logs")
}

model SystemConfig {
  id          String   @id @default(uuid())
  key         String   @unique
  value       String
  description String?
  category    String?
  isSecret    Boolean  @default(false)
  updatedBy   String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([category])
  @@map("system_configs")
}

enum UserRole {
  ADMIN
  DEVELOPER
  VIEWER
}

enum DeviceStatus {
  PENDING
  APPROVED
  REJECTED
  SUSPENDED
}

enum ActivityType {
  GIT_CLONE
  GIT_PULL
  GIT_PUSH
  GIT_COMMIT
  GIT_CHECKOUT
  REPO_ACCESS
  REPO_COPY
  UNAUTHORIZED_ACCESS
  LOGIN
  LOGOUT
}

enum RiskLevel {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum AlertType {
  UNAUTHORIZED_DEVICE
  SUSPICIOUS_ACTIVITY
  REPO_COPY_DETECTED
  UNUSUAL_LOCATION
  MULTIPLE_FAILED_AUTH
  REPO_ENCRYPTED
  DEVICE_CHANGE
}

enum Severity {
  INFO
  WARNING
  CRITICAL
}

enum SecurityStatus {
  SECURE
  WARNING
  COMPROMISED
  ENCRYPTED
}

enum BackupType {
  FULL
  INCREMENTAL
  MANUAL
  SCHEDULED
}

enum BackupStatus {
  IN_PROGRESS
  COMPLETED
  FAILED
  CANCELLED
}

enum LogLevel {
  DEBUG
  INFO
  WARNING
  ERROR
  CRITICAL
}

model UserSession {
  id           String   @id @default(uuid())
  userId       String
  token        String   @unique
  ipAddress    String?
  userAgent    String?
  isActive     Boolean  @default(true)
  expiresAt    DateTime
  lastActivity DateTime @default(now())
  createdAt    DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([token])
  @@index([expiresAt])
  @@map("user_sessions")
}

model IpWhitelist {
  id          String   @id @default(uuid())
  ipAddress   String   @unique
  description String?
  isActive    Boolean  @default(true)
  createdBy   String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("ip_whitelist")
}

model IpBlacklist {
  id          String   @id @default(uuid())
  ipAddress   String   @unique
  reason      String?
  isActive    Boolean  @default(true)
  createdBy   String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("ip_blacklist")
}

model DashboardWidget {
  id        String   @id @default(uuid())
  userId    String
  widgetType String
  position  Int
  size      String   @default("medium")
  settings  Json?
  isVisible Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@map("dashboard_widgets")
}

model EmailTemplate {
  id          String   @id @default(uuid())
  templateKey String   @unique
  subject     String
  htmlContent String
  textContent String?
  variables   Json?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("email_templates")
}

model ScheduledReport {
  id          String       @id @default(uuid())
  reportName  String
  reportType  String
  schedule    String
  recipients  Json
  filters     Json?
  isActive    Boolean      @default(true)
  lastRun     DateTime?
  nextRun     DateTime?
  createdBy   String?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  @@index([nextRun])
  @@map("scheduled_reports")
}

model NotificationPreference {
  id            String   @id @default(uuid())
  userId        String
  channel       String
  alertTypes    Json
  isEnabled     Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, channel])
  @@map("notification_preferences")
}

model ExportJob {
  id          String       @id @default(uuid())
  exportType  String
  format      String
  filters     Json?
  status      ExportStatus @default(PENDING)
  fileName    String?
  filePath    String?
  fileSize    Float?
  createdBy   String?
  createdAt   DateTime     @default(now())
  completedAt DateTime?
  error       String?

  @@index([status])
  @@index([createdBy])
  @@map("export_jobs")
}

model ActivityTimeline {
  id          String   @id @default(uuid())
  activityId  String
  step        Int
  action      String
  details     Json?
  timestamp   DateTime @default(now())

  @@index([activityId])
  @@index([timestamp])
  @@map("activity_timeline")
}

enum ExportStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
}
