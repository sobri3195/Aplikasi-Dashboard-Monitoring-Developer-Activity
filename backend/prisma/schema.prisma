generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  name      String?
  password  String
  role      UserRole @default(DEVELOPER)
  isActive  Boolean  @default(true)
  twoFactorEnabled Boolean @default(false)
  twoFactorSecret  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  devices    Device[]
  activities Activity[]
  sessions   UserSession[]
  notificationPreferences NotificationPreference[]
  riskScore  DeveloperRiskScore?

  @@map("users")
}

model Device {
  id            String       @id @default(uuid())
  userId        String
  deviceName    String
  fingerprint   String       @unique
  hostname      String?
  macAddress    String?
  cpuInfo       String?
  osInfo        String?
  ipAddress     String?
  status        DeviceStatus @default(PENDING)
  lastSeen      DateTime?
  isAuthorized  Boolean      @default(false)
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt

  user       User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  activities Activity[]
  syncStatus DeviceSyncStatus?

  @@map("devices")
}

model Activity {
  id          String         @id @default(uuid())
  userId      String
  deviceId    String?
  activityType ActivityType
  repository  String?
  branch      String?
  commitHash  String?
  details     Json?
  ipAddress   String?
  location    String?
  isSuspicious Boolean       @default(false)
  riskLevel   RiskLevel     @default(LOW)
  timestamp   DateTime      @default(now())
  createdAt   DateTime      @default(now())

  user   User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  device Device? @relation(fields: [deviceId], references: [id], onDelete: Cascade)
  alerts Alert[]

  @@index([userId])
  @@index([deviceId])
  @@index([isSuspicious])
  @@index([timestamp])
  @@map("activities")
}

model Alert {
  id          String      @id @default(uuid())
  activityId  String?
  alertType   AlertType?
  severity    Severity
  message     String
  details     Json?
  isResolved  Boolean     @default(false)
  resolvedAt  DateTime?
  resolvedBy  String?
  notified    Boolean     @default(false)
  notifiedAt  DateTime?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  activity Activity? @relation(fields: [activityId], references: [id], onDelete: Cascade)

  @@index([isResolved])
  @@index([severity])
  @@index([createdAt])
  @@map("alerts")
}

model Repository {
  id              String           @id @default(uuid())
  name            String
  gitlabUrl       String?
  gitlabProjectId Int?
  isEncrypted     Boolean          @default(false)
  encryptedAt     DateTime?
  securityStatus  SecurityStatus   @default(SECURE)
  trustedPaths    String[]         @default([])
  lastActivity    DateTime?
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt

  @@unique([gitlabProjectId])
  @@map("repositories")
}

model AuditLog {
  id        String   @id @default(uuid())
  userId    String?
  action    String
  entity    String?
  entityId  String?
  changes   Json?
  ipAddress String?
  userAgent String?
  timestamp DateTime @default(now())

  @@index([userId])
  @@index([timestamp])
  @@map("audit_logs")
}

model SystemPerformance {
  id              String   @id @default(uuid())
  cpuUsage        Float
  memoryUsage     Float
  memoryTotal     Float
  memoryFree      Float
  diskUsage       Float
  diskTotal       Float
  diskFree        Float
  activeConnections Int    @default(0)
  requestsPerMinute Int    @default(0)
  timestamp       DateTime @default(now())

  @@index([timestamp])
  @@map("system_performance")
}

model BackupRecord {
  id          String       @id @default(uuid())
  filename    String
  filePath    String
  fileSize    Float
  backupType  BackupType
  status      BackupStatus @default(IN_PROGRESS)
  startedAt   DateTime     @default(now())
  completedAt DateTime?
  error       String?
  createdBy   String?

  @@index([status])
  @@index([startedAt])
  @@map("backup_records")
}

model ApiUsageLog {
  id          String   @id @default(uuid())
  endpoint    String
  method      String
  statusCode  Int
  responseTime Float
  ipAddress   String?
  userId      String?
  userAgent   String?
  timestamp   DateTime @default(now())

  @@index([endpoint])
  @@index([userId])
  @@index([timestamp])
  @@map("api_usage_logs")
}

model SystemLog {
  id        String    @id @default(uuid())
  level     LogLevel
  message   String
  source    String?
  metadata  Json?
  timestamp DateTime  @default(now())

  @@index([level])
  @@index([timestamp])
  @@map("system_logs")
}

model SystemConfig {
  id          String   @id @default(uuid())
  key         String   @unique
  value       String
  description String?
  category    String?
  isSecret    Boolean  @default(false)
  updatedBy   String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([category])
  @@map("system_configs")
}

enum UserRole {
  ADMIN
  DEVELOPER
  VIEWER
}

enum DeviceStatus {
  PENDING
  APPROVED
  REJECTED
  SUSPENDED
}

enum ActivityType {
  GIT_CLONE
  GIT_PULL
  GIT_PUSH
  GIT_COMMIT
  GIT_CHECKOUT
  REPO_ACCESS
  REPO_COPY
  UNAUTHORIZED_ACCESS
  LOGIN
  LOGOUT
}

enum RiskLevel {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum AlertType {
  UNAUTHORIZED_DEVICE
  SUSPICIOUS_ACTIVITY
  REPO_COPY_DETECTED
  UNUSUAL_LOCATION
  MULTIPLE_FAILED_AUTH
  REPO_ENCRYPTED
  DEVICE_CHANGE
}

enum Severity {
  INFO
  WARNING
  CRITICAL
}

enum SecurityStatus {
  SECURE
  WARNING
  COMPROMISED
  ENCRYPTED
}

enum BackupType {
  FULL
  INCREMENTAL
  MANUAL
  SCHEDULED
}

enum BackupStatus {
  IN_PROGRESS
  COMPLETED
  FAILED
  CANCELLED
}

enum LogLevel {
  DEBUG
  INFO
  WARNING
  ERROR
  CRITICAL
}

model UserSession {
  id           String   @id @default(uuid())
  userId       String
  token        String   @unique
  ipAddress    String?
  userAgent    String?
  isActive     Boolean  @default(true)
  expiresAt    DateTime
  lastActivity DateTime @default(now())
  createdAt    DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([token])
  @@index([expiresAt])
  @@map("user_sessions")
}

model IpWhitelist {
  id          String   @id @default(uuid())
  ipAddress   String   @unique
  description String?
  isActive    Boolean  @default(true)
  createdBy   String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("ip_whitelist")
}

model IpBlacklist {
  id          String   @id @default(uuid())
  ipAddress   String   @unique
  reason      String?
  isActive    Boolean  @default(true)
  createdBy   String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("ip_blacklist")
}

model DashboardWidget {
  id        String   @id @default(uuid())
  userId    String
  widgetType String
  position  Int
  size      String   @default("medium")
  settings  Json?
  isVisible Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@map("dashboard_widgets")
}

model EmailTemplate {
  id          String   @id @default(uuid())
  templateKey String   @unique
  subject     String
  htmlContent String
  textContent String?
  variables   Json?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("email_templates")
}

model ScheduledReport {
  id          String       @id @default(uuid())
  reportName  String
  reportType  String
  schedule    String
  recipients  Json
  filters     Json?
  isActive    Boolean      @default(true)
  lastRun     DateTime?
  nextRun     DateTime?
  createdBy   String?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  @@index([nextRun])
  @@map("scheduled_reports")
}

model NotificationPreference {
  id            String   @id @default(uuid())
  userId        String
  channel       String
  alertTypes    Json
  isEnabled     Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, channel])
  @@map("notification_preferences")
}

model ExportJob {
  id          String       @id @default(uuid())
  exportType  String
  format      String
  filters     Json?
  status      ExportStatus @default(PENDING)
  fileName    String?
  filePath    String?
  fileSize    Float?
  createdBy   String?
  createdAt   DateTime     @default(now())
  completedAt DateTime?
  error       String?

  @@index([status])
  @@index([createdBy])
  @@map("export_jobs")
}

model ActivityTimeline {
  id          String   @id @default(uuid())
  activityId  String
  step        Int
  action      String
  details     Json?
  timestamp   DateTime @default(now())

  @@index([activityId])
  @@index([timestamp])
  @@map("activity_timeline")
}

enum ExportStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
}

model DeviceSyncStatus {
  id          String   @id @default(uuid())
  deviceId    String   @unique
  lastSyncAt  DateTime @default(now())
  syncStatus  SyncStatus @default(SYNCED)
  syncErrors  Json?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  device Device @relation(fields: [deviceId], references: [id], onDelete: Cascade)

  @@index([deviceId])
  @@index([lastSyncAt])
  @@map("device_sync_status")
}

model SecurityLog {
  id          String   @id @default(uuid())
  logType     SecurityLogType
  severity    Severity
  userId      String?
  deviceId    String?
  ipAddress   String?
  message     String
  details     Json?
  timestamp   DateTime @default(now())

  @@index([logType])
  @@index([severity])
  @@index([userId])
  @@index([timestamp])
  @@map("security_logs")
}

model BehavioralPattern {
  id                String   @id @default(uuid())
  userId            String
  deviceId          String?
  patternType       PatternType
  normalBehavior    Json
  threshold         Float    @default(0.8)
  lastUpdated       DateTime @default(now())
  createdAt         DateTime @default(now())

  @@unique([userId, deviceId, patternType])
  @@index([userId])
  @@map("behavioral_patterns")
}

model AnomalyDetection {
  id               String   @id @default(uuid())
  userId           String
  deviceId         String?
  activityId       String?
  anomalyType      AnomalyType
  anomalyScore     Float
  description      String
  details          Json?
  isReviewed       Boolean  @default(false)
  reviewedBy       String?
  reviewedAt       DateTime?
  isFalsePositive  Boolean  @default(false)
  timestamp        DateTime @default(now())

  anomalyResponses AnomalyResponse[]

  @@index([userId])
  @@index([anomalyType])
  @@index([isReviewed])
  @@index([timestamp])
  @@map("anomaly_detections")
}

model DeviceVerificationRequest {
  id          String   @id @default(uuid())
  deviceId    String
  requestedBy String
  reason      String?
  status      VerificationRequestStatus @default(PENDING)
  reviewedBy  String?
  reviewedAt  DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([deviceId])
  @@index([status])
  @@map("device_verification_requests")
}

enum SyncStatus {
  SYNCED
  SYNCING
  ERROR
  OUTDATED
}

enum SecurityLogType {
  AUTH_FAILURE
  UNAUTHORIZED_ACCESS
  DEVICE_CHANGE
  IP_CHANGE
  SUSPICIOUS_ACTIVITY
  POLICY_VIOLATION
  DATA_EXPORT
  CONFIG_CHANGE
}

enum PatternType {
  ACCESS_TIME
  GIT_COMMAND_FREQUENCY
  REPOSITORY_ACCESS
  LOCATION_PATTERN
  DEVICE_USAGE
}

enum AnomalyType {
  UNUSUAL_TIME
  HIGH_FREQUENCY
  UNUSUAL_LOCATION
  UNUSUAL_REPOSITORY
  UNUSUAL_DEVICE
  UNUSUAL_COMMAND_PATTERN
  DATA_EXFILTRATION
}

enum VerificationRequestStatus {
  PENDING
  APPROVED
  REJECTED
  EXPIRED
}

// Feature 1: Developer Behavior Risk Scoring
model DeveloperRiskScore {
  id              String   @id @default(uuid())
  userId          String   @unique
  riskScore       Float    @default(0)
  status          RiskStatus @default(NORMAL)
  cloneFrequency  Int      @default(0)
  pushFrequency   Int      @default(0)
  accessPatterns  Json?
  anomalyCount    Int      @default(0)
  lastEvaluated   DateTime @default(now())
  watchStatus     Boolean  @default(false)
  alertHistory    Json?
  recommendations Json?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([riskScore])
  @@index([watchStatus])
  @@map("developer_risk_scores")
}

enum RiskStatus {
  NORMAL
  ELEVATED
  HIGH
  UNDER_WATCH
  CRITICAL
}

// Feature 2: Repository Integrity Verification
model RepositoryHash {
  id            String         @id @default(uuid())
  repositoryId  String
  filePath      String
  commitHash    String
  fileHash      String
  hashAlgorithm String         @default("SHA-256")
  status        IntegrityStatus @default(VERIFIED)
  verifiedAt    DateTime       @default(now())
  lastChecked   DateTime       @default(now())
  tamperedAt    DateTime?
  verificationLog Json?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt

  @@unique([repositoryId, filePath, commitHash])
  @@index([repositoryId])
  @@index([status])
  @@map("repository_hashes")
}

enum IntegrityStatus {
  VERIFIED
  TAMPERED
  CORRUPTED
  PENDING_VERIFICATION
  ENCRYPTED
}

// Feature 3: Enhanced AI Anomaly Detection (baseline learning)
model AnomalyBaseline {
  id                  String   @id @default(uuid())
  userId              String
  deviceId            String   @default("")
  baselineType        BaselineType
  normalPattern       Json
  threshold           Float    @default(0.75)
  sampleSize          Int      @default(0)
  lastTrainingDate    DateTime @default(now())
  accuracy            Float?
  modelVersion        String?
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  @@unique([userId, deviceId, baselineType])
  @@index([userId])
  @@map("anomaly_baselines")
}

enum BaselineType {
  WORKING_HOURS
  COMMIT_VOLUME
  FILE_TYPES
  REPOSITORY_PATTERN
  COMMAND_SEQUENCE
}

model AnomalyResponse {
  id              String           @id @default(uuid())
  anomalyId       String
  responseType    ResponseType
  action          String
  executedAt      DateTime         @default(now())
  executedBy      String?
  status          ResponseStatus   @default(PENDING)
  details         Json?
  
  anomaly         AnomalyDetection @relation(fields: [anomalyId], references: [id], onDelete: Cascade)
  
  @@index([anomalyId])
  @@index([responseType])
  @@map("anomaly_responses")
}

enum ResponseType {
  ALERT_ONLY
  SUSPEND_REPO
  ENCRYPT_REPO
  REVOKE_ACCESS
  NOTIFY_ADMIN
}

enum ResponseStatus {
  PENDING
  EXECUTED
  FAILED
  CANCELLED
}

// Feature 4: Compliance & Audit Trail Module
model ComplianceReport {
  id              String           @id @default(uuid())
  reportType      ComplianceType
  period          String
  startDate       DateTime
  endDate         DateTime
  status          ReportStatus     @default(GENERATING)
  filePath        String?
  format          ReportFormat     @default(PDF)
  summary         Json?
  violations      Json?
  recommendations Json?
  generatedBy     String?
  generatedAt     DateTime?
  expiresAt       DateTime?
  isArchived      Boolean          @default(false)
  createdAt       DateTime         @default(now())

  @@index([reportType])
  @@index([status])
  @@index([generatedAt])
  @@map("compliance_reports")
}

enum ComplianceType {
  ISO27001
  SOC2
  GDPR
  PDPA
  HIPAA
  PCI_DSS
  CUSTOM
}

enum ReportStatus {
  GENERATING
  COMPLETED
  FAILED
  ARCHIVED
}

enum ReportFormat {
  PDF
  CSV
  JSON
  XLSX
}

model ImmutableAuditLog {
  id             String   @id @default(uuid())
  logHash        String   @unique
  previousHash   String?
  userId         String?
  action         String
  entity         String?
  entityId       String?
  changes        Json?
  ipAddress      String?
  userAgent      String?
  timestamp      DateTime @default(now())
  blockNumber    Int
  isVerified     Boolean  @default(true)

  @@index([userId])
  @@index([timestamp])
  @@index([blockNumber])
  @@map("immutable_audit_logs")
}

// Feature 5: Developer Access Token Vault & Rotation System
model AccessToken {
  id                String         @id @default(uuid())
  userId            String
  tokenName         String
  encryptedToken    String
  encryptionKey     String
  tokenType         TokenType      @default(GIT_ACCESS)
  scope             Json?
  deviceId          String?
  isActive          Boolean        @default(true)
  rotationPolicy    Int            @default(30)
  lastRotated       DateTime       @default(now())
  nextRotation      DateTime
  rotationCount     Int            @default(0)
  accessCount       Int            @default(0)
  lastUsed          DateTime?
  isCompromised     Boolean        @default(false)
  compromisedAt     DateTime?
  revokedAt         DateTime?
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt

  tokenRotationHistory TokenRotationHistory[]
  tokenAccessLogs      TokenAccessLog[]

  @@index([userId])
  @@index([deviceId])
  @@index([isActive])
  @@index([nextRotation])
  @@map("access_tokens")
}

enum TokenType {
  GIT_ACCESS
  API_KEY
  SSH_KEY
  PERSONAL_ACCESS_TOKEN
  DEPLOYMENT_KEY
}

model TokenRotationHistory {
  id            String   @id @default(uuid())
  tokenId       String
  oldTokenHash  String
  newTokenHash  String
  rotatedAt     DateTime @default(now())
  reason        RotationReason
  rotatedBy     String?
  deviceId      String?
  
  token         AccessToken @relation(fields: [tokenId], references: [id], onDelete: Cascade)
  
  @@index([tokenId])
  @@index([rotatedAt])
  @@map("token_rotation_history")
}

enum RotationReason {
  SCHEDULED
  COMPROMISED
  SUSPICIOUS_ACTIVITY
  MANUAL
  DEVICE_CHANGE
  POLICY_UPDATE
}

model TokenAccessLog {
  id          String   @id @default(uuid())
  tokenId     String
  deviceId    String?
  ipAddress   String?
  location    String?
  action      String
  isAuthorized Boolean @default(true)
  timestamp   DateTime @default(now())
  
  token       AccessToken @relation(fields: [tokenId], references: [id], onDelete: Cascade)
  
  @@index([tokenId])
  @@index([timestamp])
  @@index([isAuthorized])
  @@map("token_access_logs")
}
